schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Activity {
  caloriesConsumed: Int!
  category: String!
  creationDateTime: String!
  id: String!
  type: String!
  userid: String!
}

type ActivityCategory {
  category: String!
  type: [String]
}

type ActivityCategoryConnection {
  items: [ActivityCategory]
  nextToken: String
}

type ActivityConnection {
  items: [Activity]
  nextToken: String
}

type Mutation {
  createActivity(input: CreateActivityInput!): Activity
  createActivityCategory(input: CreateActivityCategoryInput!): ActivityCategory
  createUser(input: CreateUserInput!): User
  createUserAggregate(input: CreateUserAggregateInput!): UserAggregate
  deleteActivity(input: DeleteActivityInput!): Activity
  deleteActivityCategory(input: DeleteActivityCategoryInput!): ActivityCategory
  deleteUser(input: DeleteUserInput!): User
  deleteUserAggregate(input: DeleteUserAggregateInput!): UserAggregate
  updateActivity(input: UpdateActivityInput!): Activity
  updateActivityCategory(input: UpdateActivityCategoryInput!): ActivityCategory
  updateUser(input: UpdateUserInput!): User
  updateUserAggregate(input: UpdateUserAggregateInput!): UserAggregate
}

type Query {
  getActivity(id: String!): Activity
  getActivityCategory(category: String!): ActivityCategory
  getUser(id: ID!): User
  getUserAggregate(date: String!, userid: String!): UserAggregate
  listActivities(filter: TableActivityFilterInput, limit: Int, nextToken: String): ActivityConnection
  listActivitiesOrdered(limit: Int, nextToken: String, userid: String!): ActivityConnection
  listActivityCategories(filter: TableActivityCategoryFilterInput, limit: Int, nextToken: String): ActivityCategoryConnection
  listUserAggregates(filter: TableUserAggregateFilterInput, limit: Int, nextToken: String): UserAggregateConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
  suggestedFood(bmi: Float, calorie: Float, sugar: Float, userid: String!): [Activity]
}

type Subscription {
  onCreateActivity(caloriesConsumed: Int, id: String, userid: String): Activity @aws_subscribe(mutations : ["createActivity"])
  onCreateActivityCategory(category: String, type: [String]): ActivityCategory @aws_subscribe(mutations : ["createActivityCategory"])
  onCreateUser(caloriesTargetPerDay: Int, height: Float, id: ID, username: String, weight: Float): User @aws_subscribe(mutations : ["createUser"])
  onCreateUserAggregate(caloriesBurned: Int, caloriesConsumed: Int, date: String, userid: String): UserAggregate @aws_subscribe(mutations : ["createUserAggregate"])
  onDeleteActivity: Activity @aws_subscribe(mutations : ["deleteActivity"])
  onDeleteActivityCategory(category: String, type: [String]): ActivityCategory @aws_subscribe(mutations : ["deleteActivityCategory"])
  onDeleteUser(caloriesTargetPerDay: Int, height: Float, id: ID, username: String, weight: Float): User @aws_subscribe(mutations : ["deleteUser"])
  onDeleteUserAggregate(caloriesBurned: Int, caloriesConsumed: Int, date: String, userid: String): UserAggregate @aws_subscribe(mutations : ["deleteUserAggregate"])
  onUpdateActivity(caloriesConsumed: Int, id: String, userid: String): Activity @aws_subscribe(mutations : ["updateActivity"])
  onUpdateActivityCategory(category: String, type: [String]): ActivityCategory @aws_subscribe(mutations : ["updateActivityCategory"])
  onUpdateUser(caloriesTargetPerDay: Int, height: Float, id: ID, username: String, weight: Float): User @aws_subscribe(mutations : ["updateUser"])
  onUpdateUserAggregate(caloriesBurned: Int, caloriesConsumed: Int, date: String, userid: String): UserAggregate @aws_subscribe(mutations : ["updateUserAggregate"])
}

type User {
  bmi: Float
  caloriesConsumed: Int
  caloriesTargetPerDay: Int!
  height: Float!
  id: String!
  username: String!
  weight: Float!
}

type UserAggregate {
  caloriesBurned: Int
  caloriesConsumed: Int
  date: String!
  userid: String!
}

type UserAggregateConnection {
  items: [UserAggregate]
  nextToken: String
}

type UserConnection {
  items: [User]
  nextToken: String
}

input CreateActivityCategoryInput {
  category: String!
  type: [String]
}

input CreateActivityInput {
  caloriesConsumed: Int
  category: String!
  type: String!
  userid: String!
}

input CreateUserAggregateInput {
  caloriesBurned: Int
  caloriesConsumed: Int
  date: String!
  userid: String!
}

input CreateUserInput {
  caloriesConsumed: Int
  caloriesTargetPerDay: Int!
  height: Float!
  id: String
  username: String!
  weight: Float!
}

input DeleteActivityCategoryInput {
  category: String!
}

input DeleteActivityInput {
  id: String!
}

input DeleteUserAggregateInput {
  date: String!
  userid: String!
}

input DeleteUserInput {
  id: ID!
}

input TableActivityCategoryFilterInput {
  category: TableStringFilterInput
  type: TableStringFilterInput
}

input TableActivityFilterInput {
  caloriesConsumed: TableIntFilterInput
  creationDateTime: TableStringFilterInput
  id: TableStringFilterInput
  userid: TableStringFilterInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserAggregateFilterInput {
  caloriesBurned: TableIntFilterInput
  caloriesConsumed: TableIntFilterInput
  date: TableStringFilterInput
  userid: TableStringFilterInput
}

input TableUserFilterInput {
  caloriesConsumed: TableIntFilterInput
  caloriesTargetPerDay: TableIntFilterInput
  height: TableFloatFilterInput
  id: TableIDFilterInput
  username: TableStringFilterInput
  weight: TableFloatFilterInput
}

input UpdateActivityCategoryInput {
  category: String!
  type: [String]
}

input UpdateActivityInput {
  caloriesConsumed: Int
  id: String!
  userid: String
}

input UpdateUserAggregateInput {
  caloriesBurned: Int
  caloriesConsumed: Int
  date: String!
  userid: String!
}

input UpdateUserInput {
  caloriesConsumed: Int
  caloriesTargetPerDay: Int
  height: Float
  id: ID!
  username: String
  weight: Float
}
